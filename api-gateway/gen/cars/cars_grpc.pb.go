// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: cars.proto

package cars

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CarsService_GetAll_FullMethodName = "/cars.CarsService/GetAll"
	CarsService_GetOne_FullMethodName = "/cars.CarsService/GetOne"
	CarsService_Create_FullMethodName = "/cars.CarsService/Create"
	CarsService_Update_FullMethodName = "/cars.CarsService/Update"
)

// CarsServiceClient is the client API for CarsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CarsServiceClient interface {
	GetAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CarsList, error)
	GetOne(ctx context.Context, in *OneCarRequest, opts ...grpc.CallOption) (*OneCars, error)
	Create(ctx context.Context, in *CreateCarRequest, opts ...grpc.CallOption) (*OneCars, error)
	Update(ctx context.Context, in *UpdateCarRequest, opts ...grpc.CallOption) (*OneCars, error)
}

type carsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCarsServiceClient(cc grpc.ClientConnInterface) CarsServiceClient {
	return &carsServiceClient{cc}
}

func (c *carsServiceClient) GetAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CarsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CarsList)
	err := c.cc.Invoke(ctx, CarsService_GetAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carsServiceClient) GetOne(ctx context.Context, in *OneCarRequest, opts ...grpc.CallOption) (*OneCars, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OneCars)
	err := c.cc.Invoke(ctx, CarsService_GetOne_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carsServiceClient) Create(ctx context.Context, in *CreateCarRequest, opts ...grpc.CallOption) (*OneCars, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OneCars)
	err := c.cc.Invoke(ctx, CarsService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carsServiceClient) Update(ctx context.Context, in *UpdateCarRequest, opts ...grpc.CallOption) (*OneCars, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OneCars)
	err := c.cc.Invoke(ctx, CarsService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CarsServiceServer is the server API for CarsService service.
// All implementations must embed UnimplementedCarsServiceServer
// for forward compatibility.
type CarsServiceServer interface {
	GetAll(context.Context, *emptypb.Empty) (*CarsList, error)
	GetOne(context.Context, *OneCarRequest) (*OneCars, error)
	Create(context.Context, *CreateCarRequest) (*OneCars, error)
	Update(context.Context, *UpdateCarRequest) (*OneCars, error)
	mustEmbedUnimplementedCarsServiceServer()
}

// UnimplementedCarsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCarsServiceServer struct{}

func (UnimplementedCarsServiceServer) GetAll(context.Context, *emptypb.Empty) (*CarsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedCarsServiceServer) GetOne(context.Context, *OneCarRequest) (*OneCars, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedCarsServiceServer) Create(context.Context, *CreateCarRequest) (*OneCars, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCarsServiceServer) Update(context.Context, *UpdateCarRequest) (*OneCars, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCarsServiceServer) mustEmbedUnimplementedCarsServiceServer() {}
func (UnimplementedCarsServiceServer) testEmbeddedByValue()                     {}

// UnsafeCarsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CarsServiceServer will
// result in compilation errors.
type UnsafeCarsServiceServer interface {
	mustEmbedUnimplementedCarsServiceServer()
}

func RegisterCarsServiceServer(s grpc.ServiceRegistrar, srv CarsServiceServer) {
	// If the following call pancis, it indicates UnimplementedCarsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CarsService_ServiceDesc, srv)
}

func _CarsService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarsServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CarsService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarsServiceServer).GetAll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarsService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OneCarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarsServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CarsService_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarsServiceServer).GetOne(ctx, req.(*OneCarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarsServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CarsService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarsServiceServer).Create(ctx, req.(*CreateCarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarsServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CarsService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarsServiceServer).Update(ctx, req.(*UpdateCarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CarsService_ServiceDesc is the grpc.ServiceDesc for CarsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CarsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cars.CarsService",
	HandlerType: (*CarsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _CarsService_GetAll_Handler,
		},
		{
			MethodName: "GetOne",
			Handler:    _CarsService_GetOne_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _CarsService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CarsService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cars.proto",
}
